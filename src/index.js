import readlinesync from 'readline-sync';
import greetings from './cli.js';
import {
  roundsGames,
  maxIntEven,
  maxIntCalc,
  maxIntGcd,
  maxIntProgression,
  lengthProgression,
  maxIntPrime,
  calcOperations,
} from './games-constants.js';
import {
  getRandomInt,
  getEven,
  getRandomOper,
  getCalc,
  getGcd,
  getProgression,
  getPrime,
} from './games-calculations.js';


/*
  –°–µ–π—á–∞—Å –º–æ–¥—É–ª–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ games, –ø–æ —Ñ–∞–∫—Ç—É, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—é—Ç –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∫–æ–¥.
  –ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ, –≤ –∫–∞–∂–¥–æ–º –∏–∑ —ç—Ç–∏—Ö –º–æ–¥—É–ª–µ–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è —Ç–æ—Ç –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä–µ.
  –°–º–µ—à–∏–≤–∞—Ç—å –≤–µ—Å—å –∫–æ–¥ –≤ –æ–¥–Ω–æ–º –º–æ–¥—É–ª–µ –ª—É—á—à–µ –Ω–µ –Ω–∞–¥–æ, —ç—Ç–æ –Ω–∞—Ä—É—à–∞–µ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—é –º–µ–∂–¥—É –∏–≥—Ä–æ–≤—ã–º –¥–≤–∏–∂–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π –æ–±—â–∏–π –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä, –∏ –ª–æ–≥–∏–∫–æ–π –∫–∞–∂–¥–æ–π –æ—Ç–¥–µ–ª—å–Ω–æ–π –∏–≥—Ä—ã.
  –ù–∞—Ä—É—à–µ–Ω–∏–µ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏, –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å, —É—Å–ª–æ–∂–Ω—è—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞ (–ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º, —á—Ç–æ –º—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).
*/
const rightAnswerCalc = () => {
  console.log('What is the result of the expression?');
  let randNum1 = getRandomInt(maxIntCalc);
  let randNum2 = getRandomInt(maxIntCalc);
  if (randNum1 < randNum2) {
    do {
      randNum1 = getRandomInt(maxIntCalc);
      randNum2 = getRandomInt(maxIntCalc);
    } while (randNum1 < randNum2);
  }
  const operation = getRandomOper(calcOperations);
  console.log(`Question: ${randNum1} ${operation} ${randNum2}`);
  return getCalc(randNum1, randNum2, operation);
};

const rightAnswerGcd = () => {
  console.log('Find the greatest common divisor of given numbers');
  const randNum1 = getRandomInt(maxIntGcd);
  const randNum2 = getRandomInt(maxIntGcd);
  console.log(`Question: ${randNum1} ${randNum2}`);
  return getGcd(randNum1, randNum2);
};

const rightAnswerProgression = () => {
  console.log('What number is missing in the progression?');
  const randNum1 = getRandomInt(maxIntProgression);
  const increment = getRandomInt(maxIntProgression);
  const [progression, missedNum] = getProgression(randNum1, increment, lengthProgression);
  console.log(`Question:${progression}`);
  return missedNum;
};

const rightAnswerPrimeEven = (gameName) => {
  let num;
  if (gameName === 'Prime') {
    console.log('Answer "yes" if given number is prime. Otherwise answer "no".');
    num = maxIntPrime;
  } else {
    console.log('Answer "yes" if the number is even, otherwise answer "no".');
    num = maxIntEven;
  }
  const randNum = getRandomInt(num);
  console.log(`Question: ${randNum}`);
  return (gameName === 'Prime') ? getPrime(randNum) : getEven(randNum);
};

/*
  –ó–¥–µ—Å—å –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω –¥–æ–≤–æ–ª—å–Ω–æ —Å–ª–æ–∂–Ω—ã–π "—Ñ–∏–Ω—Ç —É—à–∞–º–∏", –∫–æ–≥–¥–∞ –∏–∑ –º–æ–¥—É–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞,
  –∞ –ø–æ—Ç–æ–º –ø–æ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.

  –ú–æ–∂–Ω–æ –ª–∏ —ç—Ç–æ –∫–∞–∫-–Ω–∏–±—É–¥—å —É–ø—Ä–æ—Å—Ç–∏—Ç—å? –°–ø–æ–π–ª–µ—Ä: –º–æ–∂–Ω–æ üòè
*/
const getRightAnswer = (gameName) => {
  let rightAnswer;
  if (gameName === 'Calc') {
    rightAnswer = rightAnswerCalc();
  }
  if (gameName === 'Gcd') {
    rightAnswer = rightAnswerGcd();
  }
  if (gameName === 'Progression') {
    rightAnswer = rightAnswerProgression();
  }
  if (gameName === 'Prime' || gameName === 'Even') {
    rightAnswer = rightAnswerPrimeEven(gameName);
  }
  return rightAnswer.toString();
};

const wrongAnswerShowText = (userName, rightAnswer, answerUser) => {
  console.log(
    `'${answerUser}' is wrong answer ;(. Correct answer was '${rightAnswer}'.`,
  );
  console.log(`Let's try again, ${userName}!`);
};

const congratulatUser = (userName, correctAnswers) => {
  if (correctAnswers === roundsGames) {
    console.log(`Congratulations, ${userName}!`);
  }
};

const calculateUserQuestions = (userName, rightAnswer, correctAnswers) => {
  let countRightAnswers = correctAnswers;
  const answerUser = readlinesync.question('Your answer:');
  if (answerUser === rightAnswer) {
    console.log('Correct!');
    countRightAnswers += 1;
  } else {
    wrongAnswerShowText(userName, rightAnswer, answerUser);
  }
  return [countRightAnswers, answerUser];
};

/*
  –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ø–æ–º–µ–Ω—è—Ç—å –Ω–µ–π–º–∏–Ω–≥. –°–µ–π—á–∞—Å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –æ—á–µ–Ω—å –ø–æ–Ω—è—Ç–Ω–æ–µ, –æ–±—ã—á–Ω–æ –ª—É—á—à–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–∞–≥–æ–ª—ã.
*/
const engineGames = (gameName) => {
  const userName = greetings();
  let countRound = 0;
  let correctAnswers = 0;
  let answerUser;
  let rightAnswer;
  do {
    countRound += 1;
    rightAnswer = getRightAnswer(gameName);
    // –û–ø—è—Ç—å –∂–µ, –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–æ–π—Ç–∏—Å—å –±–µ–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–≤–∏–∂–∫–∞ –Ω–∞ –¥–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏.
    // –û–Ω–∏ –Ω–µ —Ç–∞–∫–∏–µ —É–∂ –∏ –±–æ–ª—å—à–∏–µ –∏ —Ç–æ—á–Ω–æ –Ω–µ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ, –ø–æ—ç—Ç–æ–º—É —Ä–∞–∑–±–∏–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ, –Ω–æ –Ω–∏—á–µ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –Ω–µ –¥–∞–µ—Ç.
    [correctAnswers, answerUser] = calculateUserQuestions(
      userName,
      rightAnswer,
      correctAnswers,
    );
  } while (countRound < roundsGames && answerUser === rightAnswer);
  congratulatUser(userName, correctAnswers);
};

export default engineGames;
